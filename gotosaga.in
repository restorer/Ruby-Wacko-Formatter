=== Сага о goto. ===
С тех пор как в языках программирования возникли операторы **while**, **shitch** и прочие **for**, стали поговаривать и вреде **goto**.
И как обычно возникло две группы: те кто кричат что **goto** надо искоренить навсегда, и те, кто кричат что без **goto** жить нельзя.
Как я уже говорил, до маразма можно довести любую идею, какой бы умной и продвинутой она не была в начале. А истина... она посредине.
Рассмотрим три примера:

#||
|| >>**1**<< | >>**2**<< | >>**3**<< ||
||
>>%%""
     i = 1;
lb1: if (kbhit()) goto lb3;
     j = 100;
lb2: pause(1);
     j = j + 1;
     if (j > 0) goto lb2;
     i = i + 1;
     goto lb1;
lb3: printf("%d\n", i);
""%%<<
|
>>%%""
i = 1;
while (!kbhit())
{
    for (j = 100; j > 0; j--)
    {
        pause(1);
    }
    i++;
}
printf("%d\n", i);
""%%<<
|
>>%%""
for (i = 1; !kbhit(); i++)
for (j = 100; j--; pause(1));
printf("%d\n", i);
""%%<<
||
||#

Первый пример отличается редкой маразматичностью по поводу использования **goto**. С первого взгляда асболютно не понятно что и откуда следует.
Третий пример, напротив, характерен для кул-хацкеров, неделю назад выучивших **C**.
Второй вариант представляет собой некую золотую середину- даже начинающему будет просто разобраться в логике программы.
----
А вот другой пример:
%%""
br = false;
for (k = 0; k < levelsCnt; k++) {
  for (l = 0; l < depth; l++) {
    for (i = 0; i < width; i++) {
      for (j = 0; j < height; j++) {
        if (lv[k][l][i][j] == '#') {
          br = true;
          break;
        }
      }
      if (br) break;
    }
    if (br) break;
  }
  if (br) break;
}
""%%

Использование **goto** в такой ситуации будет предпочтительнее:
%%""
br = false;
for (k = 0; k < levelsCnt; k++) {
  for (l = 0; l < depth; l++) {
    for (i = 0; i < width; i++) {
      for (j = 0; j < height; j++) {
        if (lv[k][l][i][j] == '#') goto exlbk;
      }
    }
  }
}
exblk: ....
""%%
----
Рассмотрим, однако, по какой причине нас постоянно убеждают что **goto** вредно и даже выкидывают этот оператор из языков программирования.
Если ли в этом какой- нибудь скрытый смысл?
Оказывается есть!
Рассмотрим программу на **C""++""** :
%%""
class C_Test
{
    C_Test() {arr = new int[10];}
    ~C_Test() {delete[] arr;}
    int *arr;
};

void test(void)
{
    int i, j;

    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            C_Test tst;
            if (i > 5) goto nxi;
        }
nxi:    printf("%d\n", i);
    }
}
""%%
А вот то, во что она может **примерно** скомпилироваться:
%%""
typedef struct
{
    int *arr;
} __s_C_Test;

void __c_constructor_C_Test(__s_C_Test *this)
{
    this->arr = __lib_allocmem(sizeof(int)*10);
}

void __c_descturcor_C_Test(__s_C_Test *this)
{
    __lib_freemem(this->arr);
}

void __g_test(void)
{
    int i, j;
    __s_C_Test *tst;

    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            tst = __lib_allocmem(sizeof(__s_C_Test));
            __c_constructor_C_Test(tst);
            if (i > 5) goto __l_nxi;
            __c_destructor_C_Test(tst);
            __lib_freemem(tst);
        }
__l_nxi:
        printf("%d\n", i);
    }
}
""%%
Видно, что когда происходит **goto** не вызывается деструктор класса и не освобождается память. Компилятору достаточно сложно отследить куда прыгнет очередной **goto**.
----
Решают данную проблему по разному.
Кто-то, закомпоссировав свой мозг первосортным маразмом, делает операторы вида **break <число>** (bash, php), и теперь попробуй посчитать скобочки ^_~
А кто-то, немного подумав, делает **break <метка>** и **continue <метка>** (java). В данном случае отследить логику гораздо проще- **break** всегда делается за пределы цикла вниз, **continue** вверх, причём на метки есть некоторые ограничения:
%%""
for (....) {
    for (....) {
        if (....) break lbl;
    }
}
for (....) {
    lbl:
    for (....) {
    }
}
""%%
Ну такую метку компилятор громко ругнётся (и правильно сделает ^_~). **break (continue)** и метка должны быть в пределах одного блока.
----
Однако только ли технические причины заставляют нас не использовать **goto**?
Бездумное использование **goto** превращает программу в трудночитаемое спагетти. А правильно его использовать получается достаточно редко (лично я за последние два года использовал **goto** 0 (ноль) раз).
Любую фразу не нужно понимать буквально, иногда надо немного поднапрячь извилины, что весьма полезно (особенно если вы считаете себя программистами).
И по-этому предлагаю отныне писать так: "Использование **goto** в своих программах желательно свести к минимуму, оставляя его лишь в тех местах, где его применение действительно сокращает код и делает его понятней".

(c) Restorer, 2005
